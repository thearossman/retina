#[derive(Debug)]
pub struct UserTracked {
    // Define fields you want
    pub max_packet_size: usize,
}

// this could be automatically generated by the framework
// - just specify `to_data` and the name of the struct field
// - then framework creates subscribable type
#[derive(Debug)]
pub struct UserSubscribable {
    pub max_packet_size: usize,
}

impl UserTracked {
    pub fn new() -> Self {
        UserTracked { max_packet_size: 0, }
    }

    pub fn packet_received(&mut self, pdu: &L4Pdu) {
        self.max_packet_size = std::cmp::max(pdu.length(), self.max_packet_size);
    }

    // session generated could be helpful
    // - get the session data in some way -

    // if this isn't specified, the framework should assume that the 
    // tracked value is just transferred in with nothing
    pub fn to_data(&self) -> UserSubscribable {
        UserSubscribable { max_packet_size: self.max_packet_size }
    }
}